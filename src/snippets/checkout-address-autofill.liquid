{%- if settings.address_autofill_enable_flag and settings.googlegeo_key_value != '' -%}
<script type=""text/javascript">
	$( document ).ready(function() {
		$.support.cors = true;
		$.ajaxSetup({ cache: false });
		var city = '';
		var hascity = 0;
		var hassub = 0;
		var state = '';
		var nbhd = '';
		var subloc = '';

		$('#checkout_shipping_address_zip').keyup(function() {
		  $zval = $('#checkout_shipping_address_zip').val();

		  if($zval.length == 5){
		     $jCSval = getCityState($zval, true); 
		  }else{
		  	$('#checkout_shipping_address_city').val('');
		  	$('#checkout_shipping_address_province').val('');
		  }
		});

		function getCityState($zip, $blnUSA) {
			 var date = new Date();
			 $.getJSON('https://maps.googleapis.com/maps/api/geocode/json?address=' + $zip + '&key={{settings.googlegeo_key_value}}&type=json&_=' + date.getTime(), function(response){
				     //find the city and state
				 var address_components = response.results[0].address_components;
				 $.each(address_components, function(index, component){
					 var types = component.types;
					 $.each(types, function(index, type){
						if(type == 'locality') {
						  city = component.long_name;
						  hascity = 1;
						}
						if(type == 'administrative_area_level_1') {
						  state = component.short_name;
						}
						if(type == 'neighborhood') {
						  nbhd = component.long_name;
						}
						if(type == 'sublocality') {
						  subloc = component.long_name;
						  hassub = 1;
						}
					 });
				});

				//pre-fill the city and state
				if(hascity == 1){
					$('#checkout_shipping_address_city').val(city);
				} else if(hassub == 1) {
				    $('#checkout_shipping_address_city').val(subloc);
				} else {
				    $('#checkout_shipping_address_city').val(nbhd);
				}
				$('#checkout_shipping_address_province').val(state);
				//reset
				hascity = 0;
				hassub = 0; 
			});
		}
	});	
</script>
{%- endif -%}
{%- if settings.full_address_autofill_enable_flag and settings.googlegeo_key_value != '' -%}
<script type="text/javascript">
if (window.location.href.indexOf('checkout') > -1) {
    window.onload = function() {

        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.src = "https://maps.googleapis.com/maps/api/js?key={{settings.googlegeo_key_value}}&libraries=places";
        script.async = "true";
        script.defer = "defer";
        document.body.appendChild(script);

        setTimeout(initAutocomplete, 2000);

        var lookup = {
            "street_number": document.getElementById('checkout_shipping_address_address1'),
            "route": document.getElementById('checkout_shipping_address_address1'),
            "fullAddress": document.getElementById('checkout_shipping_address_address1'),
            "locality": document.getElementById('checkout_shipping_address_city'),
            "neighborhood": document.getElementById('checkout_shipping_address_city'),
            "administrative_area_level_1": document.getElementById('checkout_shipping_address_province'),
            "country": document.getElementById('checkout_shipping_address_country'),
            "postal_code": document.getElementById('checkout_shipping_address_zip')
        };
        var placeSearch;
        var autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'long_name',
            country: 'long_name',
            neighborhood: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            document.getElementById('checkout_shipping_address_address1').onFocus = "geolocate()";

            autocomplete = new google.maps.places.Autocomplete(
                (document.getElementById('checkout_shipping_address_address1')), { types: ['geocode'] });

            autocomplete.addListener('place_changed', fillInAddress);
        }


        function fillInAddress() {
            var place = autocomplete.getPlace();
            for (var component in componentForm) {
                lookup[component].value = '';
            }
            var fullAddress = '';
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                var val = place.address_components[i][componentForm[addressType]];
                if (componentForm[addressType]) {
                    switch (addressType) {
                        case 'street_number':
                            fullAddress = val + fullAddress;
                            break;
                        case 'route':
                            fullAddress = fullAddress + ' ';
                            fullAddress = fullAddress + val;
                            break;
                        case 'neighborhood':
                            lookup.neighborhood.value = val;
                            break;
                        case 'locality':
                            lookup.locality.value = val;
                            break;
                        case 'administrative_area_level_1':
                            lookup.administrative_area_level_1.value = val;
                            break;
                        case 'country':
                            lookup.country.value = val;
                            break;
                        case 'postal_code':
                            lookup.postal_code.value = val;
                            break;
                    }
                }
            }
            lookup.fullAddress.value = fullAddress;
        }

        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }


    };
}
</script>
{%- endif -%}

